"use strict";

var _generatorHelper = require("@prisma/generator-helper");

var _transformDMMF = require("./generator/transformDMMF");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _sdk = require("@prisma/sdk");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

(0, _generatorHelper.generatorHandler)({
  onManifest() {
    return {
      defaultOutput: './json-schema',
      prettyName: 'Prisma JSON Schema Generator'
    };
  },

  async onGenerate(options) {
    const jsonSchema = (0, _transformDMMF.transformDMMF)(options.dmmf, options.generator.config);

    if (options.generator.output) {
      const outputDir = // This ensures previous version of prisma are still supported
      typeof options.generator.output === 'string' ? options.generator.output : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      (0, _sdk.parseEnvValue)(options.generator.output);

      try {
        await fs.promises.mkdir(outputDir, {
          recursive: true
        });
        await fs.promises.writeFile(path.join(outputDir, 'json-schema.json'), JSON.stringify(jsonSchema, null, 2));
      } catch (e) {
        console.error('Error: unable to write files for Prisma Schema Generator');
        throw e;
      }
    } else {
      throw new Error('No output was specified for Prisma Schema Generator');
    }
  }

});